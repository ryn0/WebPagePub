@* WebPagePub.Web/Views/SearchLogAdmin/Index.cshtml *@
@model WebPagePub.WebApp.Models.Admin.SearchLogs.SiteSearchLogListModel
@using System.Web

@{
    ViewData["Title"] = "Search Logs";
    string fmt(DateTime? dt) => dt.HasValue ? dt.Value.ToString("yyyy-MM-ddTHH:mm") : "";
}

<h2 class="mb-3">Search Logs</h2>

<form method="get" class="mb-3">
    <div class="row g-2 align-items-end">
        <div class="col-auto">
            <label for="fromUtc" class="form-label">From (UTC)</label>
            <input id="fromUtc" name="fromUtc" type="datetime-local" class="form-control"
                   value="@fmt(Model.FromUtc)" />
        </div>
        <div class="col-auto">
            <label for="toUtc" class="form-label">To (UTC)</label>
            <input id="toUtc" name="toUtc" type="datetime-local" class="form-control"
                   value="@fmt(Model.ToUtc)" />
        </div>
        <div class="col-auto">
            <label for="term" class="form-label">Term (optional)</label>
            <input id="term" name="term" type="text" class="form-control"
                   value="@(Model.Term ?? string.Empty)" />
        </div>
        <div class="col-auto">
            <label for="pageSize" class="form-label">Page Size</label>
            <select id="pageSize" name="pageSize" class="form-select">
                @{
                    int[] sizes = new[] { 25, 50, 100, 200 };
                    foreach (var s in sizes)
                    {
                        <option value="@s" selected="@(s == Model.PageSize ? "selected" : null)">@s</option>
                    }
                }
            </select>
        </div>
        <div class="col-auto">
            <button type="submit" class="btn btn-primary">Apply</button>
        </div>
    </div>
</form>

<div class="d-flex justify-content-between align-items-center mb-2">
    <div>
        <strong>Total:</strong> @Model.TotalCount
        <span class="ms-3"><strong>Page:</strong> @Model.PageNumber / @Model.PageCount</span>
    </div>
    <div class="btn-group">
        @{
            string qs(int p) =>
            $"?fromUtc={Uri.EscapeDataString(Model.FromUtc?.ToString("o") ?? "")}" +
            $"&toUtc={Uri.EscapeDataString(Model.ToUtc?.ToString("o") ?? "")}" +
            $"&term={Uri.EscapeDataString(Model.Term ?? "")}" +
            $"&pageSize={Model.PageSize}" +
            $"&page={p}";
        }

        <a class="btn btn-outline-secondary @(Model.PageNumber <= 1 ? "disabled" : "")" href="@(Model.PageNumber > 1 ? qs(Model.PageNumber - 1) : "#")">Prev</a>
        <a class="btn btn-outline-secondary @(Model.PageNumber >= Model.PageCount ? "disabled" : "")" href="@(Model.PageNumber<Model.PageCount? qs(Model.PageNumber + 1) : "#")">Next</a>
    </div>
</div>

<div class="table-responsive">
    <table>
        <thead>
            <tr>
                <th style="white-space:nowrap;">Created (UTC)</th>
                <th>Term</th>
                <th>Results</th>
                <th title="Page / Size">Pg/Size</th>
                <th>IP</th>
                <th>Path</th>
                <th>Referrer</th>
                <th>User-Agent</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var r in Model.Items)
            {
                <tr>
                    <td style="white-space:nowrap;">@r.CreateDate.ToString("yyyy-MM-dd HH:mm:ss")</td>
                    <td>@r.Term</td>
                    <td>@r.ResultsCount</td>
                    <td>@r.PageNumber / @r.PageSize</td>
                    <td>@r.ClientIp</td>
                    <td>@r.Path</td>
                    <td class="text-truncate" style="max-width: 280px;" title="@r.Referer">@r.Referer</td>
                    <td class="text-truncate" style="max-width: 380px;" title="@r.UserAgent">@r.UserAgent</td>
                </tr>
            }
        </tbody>
    </table>
</div>

@if (Model.PageCount > 1)
{
    <nav class="mt-3">
        <ul class="pagination pagination-sm">
            @{
                int start = Math.Max(1, Model.PageNumber - 2);
                int end = Math.Min(Model.PageCount, Model.PageNumber + 2);
                if (start > 1)
                {
                    <li class="page-item"><a class="page-link" href="@qs(1)">1</a></li>
                    if (start > 2)
                    {
                        <li class="page-item disabled"><span class="page-link">…</span></li>
                    }
                }
                for (int p = start; p <= end; p++)
                {
                    <li class="page-item @(p == Model.PageNumber ? "active" : "")">
                        <a class="page-link" href="@qs(p)">@p</a>
                    </li>
                }
                if (end < Model.PageCount)
                {
                    if (end < Model.PageCount - 1)
                    {
                        <li class="page-item disabled"><span class="page-link">…</span></li>
                    }
                    <li class="page-item"><a class="page-link" href="@qs(Model.PageCount)">@Model.PageCount</a></li>
                }
            }
        </ul>
    </nav>
}
